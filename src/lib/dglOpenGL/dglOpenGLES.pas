 {$mode objfpc}
unit dglOpenGLES;



interface



uses
    // LoadLibrary functions
  SysUtils,
  {$IFDEF UseSDL3}
  SDL3;

  {$ELSE}
  sdl2;
  {$ENDIF}

{$IFDEF FPC}
{$PACKRECORDS C}
{$ENDIF}


 const
        // Proper opengles constants
        gles_lib = 'libGLESv3.so';

GL_DEPTH_BUFFER_BIT               = $00000100;
GL_STENCIL_BUFFER_BIT             = $00000400;
GL_COLOR_BUFFER_BIT               = $00004000;
GL_FALSE                          = 0;
GL_TRUE                           = 1;
GL_POINTS                         = $0000;
GL_LINES                          = $0001;
GL_LINE_LOOP                      = $0002;
GL_LINE_STRIP                     = $0003;
GL_TRIANGLES                      = $0004;
GL_TRIANGLE_STRIP                 = $0005;
GL_TRIANGLE_FAN                   = $0006;
GL_ZERO                           = 0;
GL_ONE                            = 1;
GL_SRC_COLOR                      = $0300;
GL_ONE_MINUS_SRC_COLOR            = $0301;
GL_SRC_ALPHA                      = $0302;
GL_ONE_MINUS_SRC_ALPHA            = $0303;
GL_DST_ALPHA                      = $0304;
GL_ONE_MINUS_DST_ALPHA            = $0305;
GL_DST_COLOR                      = $0306;
GL_ONE_MINUS_DST_COLOR            = $0307;
GL_SRC_ALPHA_SATURATE             = $0308;
GL_FUNC_ADD                       = $8006;
GL_BLEND_EQUATION                 = $8009;
GL_BLEND_EQUATION_RGB             = $8009;
GL_BLEND_EQUATION_ALPHA           = $883D;
GL_FUNC_SUBTRACT                  = $800A;
GL_FUNC_REVERSE_SUBTRACT          = $800B;
GL_BLEND_DST_RGB                  = $80C8;
GL_BLEND_SRC_RGB                  = $80C9;
GL_BLEND_DST_ALPHA                = $80CA;
GL_BLEND_SRC_ALPHA                = $80CB;
GL_CONSTANT_COLOR                 = $8001;
GL_ONE_MINUS_CONSTANT_COLOR       = $8002;
GL_CONSTANT_ALPHA                 = $8003;
GL_ONE_MINUS_CONSTANT_ALPHA       = $8004;
GL_BLEND_COLOR                    = $8005;
GL_ARRAY_BUFFER                   = $8892;
GL_ELEMENT_ARRAY_BUFFER           = $8893;
GL_ARRAY_BUFFER_BINDING           = $8894;
GL_ELEMENT_ARRAY_BUFFER_BINDING   = $8895;
GL_STREAM_DRAW                    = $88E0;
GL_STATIC_DRAW                    = $88E4;
GL_DYNAMIC_DRAW                   = $88E8;
GL_BUFFER_SIZE                    = $8764;
GL_BUFFER_USAGE                   = $8765;
GL_CURRENT_VERTEX_ATTRIB          = $8626;
GL_FRONT                          = $0404;
GL_BACK                           = $0405;
GL_FRONT_AND_BACK                 = $0408;
GL_TEXTURE_2D                     = $0DE1;
GL_CULL_FACE                      = $0B44;
GL_BLEND                          = $0BE2;
GL_DITHER                         = $0BD0;
GL_STENCIL_TEST                   = $0B90;
GL_DEPTH_TEST                     = $0B71;
GL_SCISSOR_TEST                   = $0C11;
GL_POLYGON_OFFSET_FILL            = $8037;
GL_SAMPLE_ALPHA_TO_COVERAGE       = $809E;
GL_SAMPLE_COVERAGE                = $80A0;
GL_NO_ERROR                       = 0;
GL_INVALID_ENUM                   = $0500;
GL_INVALID_VALUE                  = $0501;
GL_INVALID_OPERATION              = $0502;
GL_OUT_OF_MEMORY                  = $0505;
GL_CW                             = $0900;
GL_CCW                            = $0901;
GL_LINE_WIDTH                     = $0B21;
GL_ALIASED_POINT_SIZE_RANGE       = $846D;
GL_ALIASED_LINE_WIDTH_RANGE       = $846E;
GL_CULL_FACE_MODE                 = $0B45;
GL_FRONT_FACE                     = $0B46;
GL_DEPTH_RANGE                    = $0B70;
GL_DEPTH_WRITEMASK                = $0B72;
GL_DEPTH_CLEAR_VALUE              = $0B73;
GL_DEPTH_FUNC                     = $0B74;
GL_STENCIL_CLEAR_VALUE            = $0B91;
GL_STENCIL_FUNC                   = $0B92;
GL_STENCIL_FAIL                   = $0B94;
GL_STENCIL_PASS_DEPTH_FAIL        = $0B95;
GL_STENCIL_PASS_DEPTH_PASS        = $0B96;
GL_STENCIL_REF                    = $0B97;
GL_STENCIL_VALUE_MASK             = $0B93;
GL_STENCIL_WRITEMASK              = $0B98;
GL_STENCIL_BACK_FUNC              = $8800;
GL_STENCIL_BACK_FAIL              = $8801;
GL_STENCIL_BACK_PASS_DEPTH_FAIL   = $8802;
GL_STENCIL_BACK_PASS_DEPTH_PASS   = $8803;
GL_STENCIL_BACK_REF               = $8CA3;
GL_STENCIL_BACK_VALUE_MASK        = $8CA4;
GL_STENCIL_BACK_WRITEMASK         = $8CA5;
GL_VIEWPORT                       = $0BA2;
GL_SCISSOR_BOX                    = $0C10;
GL_COLOR_CLEAR_VALUE              = $0C22;
GL_COLOR_WRITEMASK                = $0C23;
GL_UNPACK_ALIGNMENT               = $0CF5;
GL_PACK_ALIGNMENT                 = $0D05;
GL_MAX_TEXTURE_SIZE               = $0D33;
GL_MAX_VIEWPORT_DIMS              = $0D3A;
GL_SUBPIXEL_BITS                  = $0D50;
GL_RED_BITS                       = $0D52;
GL_GREEN_BITS                     = $0D53;
GL_BLUE_BITS                      = $0D54;
GL_ALPHA_BITS                     = $0D55;
GL_DEPTH_BITS                     = $0D56;
GL_STENCIL_BITS                   = $0D57;
GL_POLYGON_OFFSET_UNITS           = $2A00;
GL_POLYGON_OFFSET_FACTOR          = $8038;
GL_TEXTURE_BINDING_2D             = $8069;
GL_SAMPLE_BUFFERS                 = $80A8;
GL_SAMPLES                        = $80A9;
GL_SAMPLE_COVERAGE_VALUE          = $80AA;
GL_SAMPLE_COVERAGE_INVERT         = $80AB;
GL_NUM_COMPRESSED_TEXTURE_FORMATS = $86A2;
GL_COMPRESSED_TEXTURE_FORMATS     = $86A3;
GL_DONT_CARE                      = $1100;
GL_FASTEST                        = $1101;
GL_NICEST                         = $1102;
GL_GENERATE_MIPMAP_HINT           = $8192;
GL_BYTE                           = $1400;
GL_UNSIGNED_BYTE                  = $1401;
GL_SHORT                          = $1402;
GL_UNSIGNED_SHORT                 = $1403;
GL_INT                            = $1404;
GL_UNSIGNED_INT                   = $1405;
GL_FLOAT                          = $1406;
GL_FIXED                          = $140C;
GL_DEPTH_COMPONENT                = $1902;
GL_ALPHA                          = $1906;
GL_RGB                            = $1907;
GL_RGBA                           = $1908;
GL_LUMINANCE                      = $1909;
GL_LUMINANCE_ALPHA                = $190A;
GL_UNSIGNED_SHORT_4_4_4_4         = $8033;
GL_UNSIGNED_SHORT_5_5_5_1         = $8034;
GL_UNSIGNED_SHORT_5_6_5           = $8363;
GL_FRAGMENT_SHADER                = $8B30;
GL_VERTEX_SHADER                  = $8B31;
GL_MAX_VERTEX_ATTRIBS             = $8869;
GL_MAX_VERTEX_UNIFORM_VECTORS     = $8DFB;
GL_MAX_VARYING_VECTORS            = $8DFC;
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = $8B4D;
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = $8B4C;
GL_MAX_TEXTURE_IMAGE_UNITS        = $8872;
GL_MAX_FRAGMENT_UNIFORM_VECTORS   = $8DFD;
GL_SHADER_TYPE                    = $8B4F;
GL_DELETE_STATUS                  = $8B80;
GL_LINK_STATUS                    = $8B82;
GL_VALIDATE_STATUS                = $8B83;
GL_ATTACHED_SHADERS               = $8B85;
GL_ACTIVE_UNIFORMS                = $8B86;
GL_ACTIVE_UNIFORM_MAX_LENGTH      = $8B87;
GL_ACTIVE_ATTRIBUTES              = $8B89;
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH    = $8B8A;
GL_SHADING_LANGUAGE_VERSION       = $8B8C;
GL_CURRENT_PROGRAM                = $8B8D;
GL_NEVER                          = $0200;
GL_LESS                           = $0201;
GL_EQUAL                          = $0202;
GL_LEQUAL                         = $0203;
GL_GREATER                        = $0204;
GL_NOTEQUAL                       = $0205;
GL_GEQUAL                         = $0206;
GL_ALWAYS                         = $0207;
GL_KEEP                           = $1E00;
GL_REPLACE                        = $1E01;
GL_INCR                           = $1E02;
GL_DECR                           = $1E03;
GL_INVERT                         = $150A;
GL_INCR_WRAP                      = $8507;
GL_DECR_WRAP                      = $8508;
GL_VENDOR                         = $1F00;
GL_RENDERER                       = $1F01;
GL_VERSION                        = $1F02;
GL_EXTENSIONS                     = $1F03;
GL_NEAREST                        = $2600;
GL_LINEAR                         = $2601;
GL_NEAREST_MIPMAP_NEAREST         = $2700;
GL_LINEAR_MIPMAP_NEAREST          = $2701;
GL_NEAREST_MIPMAP_LINEAR          = $2702;
GL_LINEAR_MIPMAP_LINEAR           = $2703;
GL_TEXTURE_MAG_FILTER             = $2800;
GL_TEXTURE_MIN_FILTER             = $2801;
GL_TEXTURE_WRAP_S                 = $2802;
GL_TEXTURE_WRAP_T                 = $2803;
GL_TEXTURE                        = $1702;
GL_TEXTURE_CUBE_MAP               = $8513;
GL_TEXTURE_BINDING_CUBE_MAP       = $8514;
GL_TEXTURE_CUBE_MAP_POSITIVE_X    = $8515;
GL_TEXTURE_CUBE_MAP_NEGATIVE_X    = $8516;
GL_TEXTURE_CUBE_MAP_POSITIVE_Y    = $8517;
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y    = $8518;
GL_TEXTURE_CUBE_MAP_POSITIVE_Z    = $8519;
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z    = $851A;
GL_MAX_CUBE_MAP_TEXTURE_SIZE      = $851C;
GL_TEXTURE0                       = $84C0;
GL_TEXTURE1                       = $84C1;
GL_TEXTURE2                       = $84C2;
GL_TEXTURE3                       = $84C3;
GL_TEXTURE4                       = $84C4;
GL_TEXTURE5                       = $84C5;
GL_TEXTURE6                       = $84C6;
GL_TEXTURE7                       = $84C7;
GL_TEXTURE8                       = $84C8;
GL_TEXTURE9                       = $84C9;
GL_TEXTURE10                      = $84CA;
GL_TEXTURE11                      = $84CB;
GL_TEXTURE12                      = $84CC;
GL_TEXTURE13                      = $84CD;
GL_TEXTURE14                      = $84CE;
GL_TEXTURE15                      = $84CF;
GL_TEXTURE16                      = $84D0;
GL_TEXTURE17                      = $84D1;
GL_TEXTURE18                      = $84D2;
GL_TEXTURE19                      = $84D3;
GL_TEXTURE20                      = $84D4;
GL_TEXTURE21                      = $84D5;
GL_TEXTURE22                      = $84D6;
GL_TEXTURE23                      = $84D7;
GL_TEXTURE24                      = $84D8;
GL_TEXTURE25                      = $84D9;
GL_TEXTURE26                      = $84DA;
GL_TEXTURE27                      = $84DB;
GL_TEXTURE28                      = $84DC;
GL_TEXTURE29                      = $84DD;
GL_TEXTURE30                      = $84DE;
GL_TEXTURE31                      = $84DF;
GL_ACTIVE_TEXTURE                 = $84E0;
GL_REPEAT                         = $2901;
GL_CLAMP_TO_EDGE                  = $812F;
GL_MIRRORED_REPEAT                = $8370;
GL_FLOAT_VEC2                     = $8B50;
GL_FLOAT_VEC3                     = $8B51;
GL_FLOAT_VEC4                     = $8B52;
GL_INT_VEC2                       = $8B53;
GL_INT_VEC3                       = $8B54;
GL_INT_VEC4                       = $8B55;
GL_BOOL                           = $8B56;
GL_BOOL_VEC2                      = $8B57;
GL_BOOL_VEC3                      = $8B58;
GL_BOOL_VEC4                      = $8B59;
GL_FLOAT_MAT2                     = $8B5A;
GL_FLOAT_MAT3                     = $8B5B;
GL_FLOAT_MAT4                     = $8B5C;
GL_SAMPLER_2D                     = $8B5E;
GL_SAMPLER_CUBE                   = $8B60;
GL_VERTEX_ATTRIB_ARRAY_ENABLED    = $8622;
GL_VERTEX_ATTRIB_ARRAY_SIZE       = $8623;
GL_VERTEX_ATTRIB_ARRAY_STRIDE     = $8624;
GL_VERTEX_ATTRIB_ARRAY_TYPE       = $8625;
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = $886A;
GL_VERTEX_ATTRIB_ARRAY_POINTER    = $8645;
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = $889F;
GL_IMPLEMENTATION_COLOR_READ_TYPE = $8B9A;
GL_IMPLEMENTATION_COLOR_READ_FORMAT = $8B9B;
GL_COMPILE_STATUS                 = $8B81;
GL_INFO_LOG_LENGTH                = $8B84;
GL_SHADER_SOURCE_LENGTH           = $8B88;
GL_SHADER_COMPILER                = $8DFA;
GL_SHADER_BINARY_FORMATS          = $8DF8;
GL_NUM_SHADER_BINARY_FORMATS      = $8DF9;
GL_LOW_FLOAT                      = $8DF0;
GL_MEDIUM_FLOAT                   = $8DF1;
GL_HIGH_FLOAT                     = $8DF2;
GL_LOW_INT                        = $8DF3;
GL_MEDIUM_INT                     = $8DF4;
GL_HIGH_INT                       = $8DF5;
GL_FRAMEBUFFER                    = $8D40;
GL_RENDERBUFFER                   = $8D41;
GL_RGBA4                          = $8056;
GL_RGB5_A1                        = $8057;
GL_RGB565                         = $8D62;
GL_DEPTH_COMPONENT16              = $81A5;
GL_STENCIL_INDEX8                 = $8D48;
GL_RENDERBUFFER_WIDTH             = $8D42;
GL_RENDERBUFFER_HEIGHT            = $8D43;
GL_RENDERBUFFER_INTERNAL_FORMAT   = $8D44;
GL_RENDERBUFFER_RED_SIZE          = $8D50;
GL_RENDERBUFFER_GREEN_SIZE        = $8D51;
GL_RENDERBUFFER_BLUE_SIZE         = $8D52;
GL_RENDERBUFFER_ALPHA_SIZE        = $8D53;
GL_RENDERBUFFER_DEPTH_SIZE        = $8D54;
GL_RENDERBUFFER_STENCIL_SIZE      = $8D55;
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = $8CD0;
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = $8CD1;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = $8CD2;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = $8CD3;
GL_COLOR_ATTACHMENT0              = $8CE0;
GL_DEPTH_ATTACHMENT               = $8D00;
GL_STENCIL_ATTACHMENT             = $8D20;
GL_NONE                           = 0;
GL_FRAMEBUFFER_COMPLETE           = $8CD5;
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = $8CD6;
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = $8CD7;
GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = $8CD9;
GL_FRAMEBUFFER_UNSUPPORTED        = $8CDD;
GL_FRAMEBUFFER_BINDING            = $8CA6;
GL_RENDERBUFFER_BINDING           = $8CA7;
GL_MAX_RENDERBUFFER_SIZE          = $84E8;
GL_INVALID_FRAMEBUFFER_OPERATION  = $0506;

GL_READ_BUFFER                    = $0C02;
GL_UNPACK_ROW_LENGTH              = $0CF2;
GL_UNPACK_SKIP_ROWS               = $0CF3;
GL_UNPACK_SKIP_PIXELS             = $0CF4;
GL_PACK_ROW_LENGTH                = $0D02;
GL_PACK_SKIP_ROWS                 = $0D03;
GL_PACK_SKIP_PIXELS               = $0D04;
GL_COLOR                          = $1800;
GL_DEPTH                          = $1801;
GL_STENCIL                        = $1802;
GL_RED                            = $1903;
GL_RGB8                           = $8051;
GL_RGBA8                          = $8058;
GL_RGB10_A2                       = $8059;
GL_TEXTURE_BINDING_3D             = $806A;
GL_UNPACK_SKIP_IMAGES             = $806D;
GL_UNPACK_IMAGE_HEIGHT            = $806E;
GL_TEXTURE_3D                     = $806F;
GL_TEXTURE_WRAP_R                 = $8072;
GL_MAX_3D_TEXTURE_SIZE            = $8073;
GL_UNSIGNED_INT_2_10_10_10_REV    = $8368;
GL_MAX_ELEMENTS_VERTICES          = $80E8;
GL_MAX_ELEMENTS_INDICES           = $80E9;
GL_TEXTURE_MIN_LOD                = $813A;
GL_TEXTURE_MAX_LOD                = $813B;
GL_TEXTURE_BASE_LEVEL             = $813C;
GL_TEXTURE_MAX_LEVEL              = $813D;
GL_MIN                            = $8007;
GL_MAX                            = $8008;
GL_DEPTH_COMPONENT24              = $81A6;
GL_MAX_TEXTURE_LOD_BIAS           = $84FD;
GL_TEXTURE_COMPARE_MODE           = $884C;
GL_TEXTURE_COMPARE_FUNC           = $884D;
GL_CURRENT_QUERY                  = $8865;
GL_QUERY_RESULT                   = $8866;
GL_QUERY_RESULT_AVAILABLE         = $8867;
GL_BUFFER_MAPPED                  = $88BC;
GL_BUFFER_MAP_POINTER             = $88BD;
GL_STREAM_READ                    = $88E1;
GL_STREAM_COPY                    = $88E2;
GL_STATIC_READ                    = $88E5;
GL_STATIC_COPY                    = $88E6;
GL_DYNAMIC_READ                   = $88E9;
GL_DYNAMIC_COPY                   = $88EA;
GL_MAX_DRAW_BUFFERS               = $8824;
GL_DRAW_BUFFER0                   = $8825;
GL_DRAW_BUFFER1                   = $8826;
GL_DRAW_BUFFER2                   = $8827;
GL_DRAW_BUFFER3                   = $8828;
GL_DRAW_BUFFER4                   = $8829;
GL_DRAW_BUFFER5                   = $882A;
GL_DRAW_BUFFER6                   = $882B;
GL_DRAW_BUFFER7                   = $882C;
GL_DRAW_BUFFER8                   = $882D;
GL_DRAW_BUFFER9                   = $882E;
GL_DRAW_BUFFER10                  = $882F;
GL_DRAW_BUFFER11                  = $8830;
GL_DRAW_BUFFER12                  = $8831;
GL_DRAW_BUFFER13                  = $8832;
GL_DRAW_BUFFER14                  = $8833;
GL_DRAW_BUFFER15                  = $8834;
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = $8B49;
GL_MAX_VERTEX_UNIFORM_COMPONENTS  = $8B4A;
GL_SAMPLER_3D                     = $8B5F;
GL_SAMPLER_2D_SHADOW              = $8B62;
GL_FRAGMENT_SHADER_DERIVATIVE_HINT = $8B8B;
GL_PIXEL_PACK_BUFFER              = $88EB;
GL_PIXEL_UNPACK_BUFFER            = $88EC;
GL_PIXEL_PACK_BUFFER_BINDING      = $88ED;
GL_PIXEL_UNPACK_BUFFER_BINDING    = $88EF;
GL_FLOAT_MAT2x3                   = $8B65;
GL_FLOAT_MAT2x4                   = $8B66;
GL_FLOAT_MAT3x2                   = $8B67;
GL_FLOAT_MAT3x4                   = $8B68;
GL_FLOAT_MAT4x2                   = $8B69;
GL_FLOAT_MAT4x3                   = $8B6A;
GL_SRGB                           = $8C40;
GL_SRGB8                          = $8C41;
GL_SRGB8_ALPHA8                   = $8C43;
GL_COMPARE_REF_TO_TEXTURE         = $884E;
GL_MAJOR_VERSION                  = $821B;
GL_MINOR_VERSION                  = $821C;
GL_NUM_EXTENSIONS                 = $821D;
GL_RGBA32F                        = $8814;
GL_RGB32F                         = $8815;
GL_RGBA16F                        = $881A;
GL_RGB16F                         = $881B;
GL_VERTEX_ATTRIB_ARRAY_INTEGER    = $88FD;
GL_MAX_ARRAY_TEXTURE_LAYERS       = $88FF;
GL_MIN_PROGRAM_TEXEL_OFFSET       = $8904;
GL_MAX_PROGRAM_TEXEL_OFFSET       = $8905;
GL_MAX_VARYING_COMPONENTS         = $8B4B;
GL_TEXTURE_2D_ARRAY               = $8C1A;
GL_TEXTURE_BINDING_2D_ARRAY       = $8C1D;
GL_R11F_G11F_B10F                 = $8C3A;
GL_UNSIGNED_INT_10F_11F_11F_REV   = $8C3B;
GL_RGB9_E5                        = $8C3D;
GL_UNSIGNED_INT_5_9_9_9_REV       = $8C3E;
GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = $8C76;
GL_TRANSFORM_FEEDBACK_BUFFER_MODE = $8C7F;
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = $8C80;
GL_TRANSFORM_FEEDBACK_VARYINGS    = $8C83;
GL_TRANSFORM_FEEDBACK_BUFFER_START = $8C84;
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = $8C85;
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = $8C88;
GL_RASTERIZER_DISCARD             = $8C89;
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = $8C8A;
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = $8C8B;
GL_INTERLEAVED_ATTRIBS            = $8C8C;
GL_SEPARATE_ATTRIBS               = $8C8D;
GL_TRANSFORM_FEEDBACK_BUFFER      = $8C8E;
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = $8C8F;
GL_RGBA32UI                       = $8D70;
GL_RGB32UI                        = $8D71;
GL_RGBA16UI                       = $8D76;
GL_RGB16UI                        = $8D77;
GL_RGBA8UI                        = $8D7C;
GL_RGB8UI                         = $8D7D;
GL_RGBA32I                        = $8D82;
GL_RGB32I                         = $8D83;
GL_RGBA16I                        = $8D88;
GL_RGB16I                         = $8D89;
GL_RGBA8I                         = $8D8E;
GL_RGB8I                          = $8D8F;
GL_RED_INTEGER                    = $8D94;
GL_RGB_INTEGER                    = $8D98;
GL_RGBA_INTEGER                   = $8D99;
GL_SAMPLER_2D_ARRAY               = $8DC1;
GL_SAMPLER_2D_ARRAY_SHADOW        = $8DC4;
GL_SAMPLER_CUBE_SHADOW            = $8DC5;
GL_UNSIGNED_INT_VEC2              = $8DC6;
GL_UNSIGNED_INT_VEC3              = $8DC7;
GL_UNSIGNED_INT_VEC4              = $8DC8;
GL_INT_SAMPLER_2D                 = $8DCA;
GL_INT_SAMPLER_3D                 = $8DCB;
GL_INT_SAMPLER_CUBE               = $8DCC;
GL_INT_SAMPLER_2D_ARRAY           = $8DCF;
GL_UNSIGNED_INT_SAMPLER_2D        = $8DD2;
GL_UNSIGNED_INT_SAMPLER_3D        = $8DD3;
GL_UNSIGNED_INT_SAMPLER_CUBE      = $8DD4;
GL_UNSIGNED_INT_SAMPLER_2D_ARRAY  = $8DD7;
GL_BUFFER_ACCESS_FLAGS            = $911F;
GL_BUFFER_MAP_LENGTH              = $9120;
GL_BUFFER_MAP_OFFSET              = $9121;
GL_DEPTH_COMPONENT32F             = $8CAC;
GL_DEPTH32F_STENCIL8              = $8CAD;
GL_FLOAT_32_UNSIGNED_INT_24_8_REV = $8DAD;
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = $8210;
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = $8211;
GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = $8212;
GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = $8213;
GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = $8214;
GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = $8215;
GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = $8216;
GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = $8217;
GL_FRAMEBUFFER_DEFAULT            = $8218;
GL_FRAMEBUFFER_UNDEFINED          = $8219;
GL_DEPTH_STENCIL_ATTACHMENT       = $821A;
GL_DEPTH_STENCIL                  = $84F9;
GL_UNSIGNED_INT_24_8              = $84FA;
GL_DEPTH24_STENCIL8               = $88F0;
GL_UNSIGNED_NORMALIZED            = $8C17;
GL_DRAW_FRAMEBUFFER_BINDING       = $8CA6;
GL_READ_FRAMEBUFFER               = $8CA8;
GL_DRAW_FRAMEBUFFER               = $8CA9;
GL_READ_FRAMEBUFFER_BINDING       = $8CAA;
GL_RENDERBUFFER_SAMPLES           = $8CAB;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = $8CD4;
GL_MAX_COLOR_ATTACHMENTS          = $8CDF;
GL_COLOR_ATTACHMENT1              = $8CE1;
GL_COLOR_ATTACHMENT2              = $8CE2;
GL_COLOR_ATTACHMENT3              = $8CE3;
GL_COLOR_ATTACHMENT4              = $8CE4;
GL_COLOR_ATTACHMENT5              = $8CE5;
GL_COLOR_ATTACHMENT6              = $8CE6;
GL_COLOR_ATTACHMENT7              = $8CE7;
GL_COLOR_ATTACHMENT8              = $8CE8;
GL_COLOR_ATTACHMENT9              = $8CE9;
GL_COLOR_ATTACHMENT10             = $8CEA;
GL_COLOR_ATTACHMENT11             = $8CEB;
GL_COLOR_ATTACHMENT12             = $8CEC;
GL_COLOR_ATTACHMENT13             = $8CED;
GL_COLOR_ATTACHMENT14             = $8CEE;
GL_COLOR_ATTACHMENT15             = $8CEF;
GL_COLOR_ATTACHMENT16             = $8CF0;
GL_COLOR_ATTACHMENT17             = $8CF1;
GL_COLOR_ATTACHMENT18             = $8CF2;
GL_COLOR_ATTACHMENT19             = $8CF3;
GL_COLOR_ATTACHMENT20             = $8CF4;
GL_COLOR_ATTACHMENT21             = $8CF5;
GL_COLOR_ATTACHMENT22             = $8CF6;
GL_COLOR_ATTACHMENT23             = $8CF7;
GL_COLOR_ATTACHMENT24             = $8CF8;
GL_COLOR_ATTACHMENT25             = $8CF9;
GL_COLOR_ATTACHMENT26             = $8CFA;
GL_COLOR_ATTACHMENT27             = $8CFB;
GL_COLOR_ATTACHMENT28             = $8CFC;
GL_COLOR_ATTACHMENT29             = $8CFD;
GL_COLOR_ATTACHMENT30             = $8CFE;
GL_COLOR_ATTACHMENT31             = $8CFF;
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = $8D56;
GL_MAX_SAMPLES                    = $8D57;
GL_HALF_FLOAT                     = $140B;
GL_MAP_READ_BIT                   = $0001;
GL_MAP_WRITE_BIT                  = $0002;
GL_MAP_INVALIDATE_RANGE_BIT       = $0004;
GL_MAP_INVALIDATE_BUFFER_BIT      = $0008;
GL_MAP_FLUSH_EXPLICIT_BIT         = $0010;
GL_MAP_UNSYNCHRONIZED_BIT         = $0020;
GL_RG                             = $8227;
GL_RG_INTEGER                     = $8228;
GL_R8                             = $8229;
GL_RG8                            = $822B;
GL_R16F                           = $822D;
GL_R32F                           = $822E;
GL_RG16F                          = $822F;
GL_RG32F                          = $8230;
GL_R8I                            = $8231;
GL_R8UI                           = $8232;
GL_R16I                           = $8233;
GL_R16UI                          = $8234;
GL_R32I                           = $8235;
GL_R32UI                          = $8236;
GL_RG8I                           = $8237;
GL_RG8UI                          = $8238;
GL_RG16I                          = $8239;
GL_RG16UI                         = $823A;
GL_RG32I                          = $823B;
GL_RG32UI                         = $823C;
GL_VERTEX_ARRAY_BINDING           = $85B5;
GL_R8_SNORM                       = $8F94;
GL_RG8_SNORM                      = $8F95;
GL_RGB8_SNORM                     = $8F96;
GL_RGBA8_SNORM                    = $8F97;
GL_SIGNED_NORMALIZED              = $8F9C;
GL_PRIMITIVE_RESTART_FIXED_INDEX  = $8D69;
GL_COPY_READ_BUFFER               = $8F36;
GL_COPY_WRITE_BUFFER              = $8F37;
GL_COPY_READ_BUFFER_BINDING       = $8F36;
GL_COPY_WRITE_BUFFER_BINDING      = $8F37;
GL_UNIFORM_BUFFER                 = $8A11;
GL_UNIFORM_BUFFER_BINDING         = $8A28;
GL_UNIFORM_BUFFER_START           = $8A29;
GL_UNIFORM_BUFFER_SIZE            = $8A2A;
GL_MAX_VERTEX_UNIFORM_BLOCKS      = $8A2B;
GL_MAX_FRAGMENT_UNIFORM_BLOCKS    = $8A2D;
GL_MAX_COMBINED_UNIFORM_BLOCKS    = $8A2E;
GL_MAX_UNIFORM_BUFFER_BINDINGS    = $8A2F;
GL_MAX_UNIFORM_BLOCK_SIZE         = $8A30;
GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = $8A31;
GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = $8A33;
GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = $8A34;
GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = $8A35;
GL_ACTIVE_UNIFORM_BLOCKS          = $8A36;
GL_UNIFORM_TYPE                   = $8A37;
GL_UNIFORM_SIZE                   = $8A38;
GL_UNIFORM_NAME_LENGTH            = $8A39;
GL_UNIFORM_BLOCK_INDEX            = $8A3A;
GL_UNIFORM_OFFSET                 = $8A3B;
GL_UNIFORM_ARRAY_STRIDE           = $8A3C;
GL_UNIFORM_MATRIX_STRIDE          = $8A3D;
GL_UNIFORM_IS_ROW_MAJOR           = $8A3E;
GL_UNIFORM_BLOCK_BINDING          = $8A3F;
GL_UNIFORM_BLOCK_DATA_SIZE        = $8A40;
GL_UNIFORM_BLOCK_NAME_LENGTH      = $8A41;
GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS  = $8A42;
GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = $8A43;
GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = $8A44;
GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = $8A46;
GL_INVALID_INDEX                  = $FFFFFFFF;
GL_MAX_VERTEX_OUTPUT_COMPONENTS   = $9122;
GL_MAX_FRAGMENT_INPUT_COMPONENTS  = $9125;
GL_MAX_SERVER_WAIT_TIMEOUT        = $9111;
GL_OBJECT_TYPE                    = $9112;
GL_SYNC_CONDITION                 = $9113;
GL_SYNC_STATUS                    = $9114;
GL_SYNC_FLAGS                     = $9115;
GL_SYNC_FENCE                     = $9116;
GL_SYNC_GPU_COMMANDS_COMPLETE     = $9117;
GL_UNSIGNALED                     = $9118;
GL_SIGNALED                       = $9119;
GL_ALREADY_SIGNALED               = $911A;
GL_TIMEOUT_EXPIRED                = $911B;
GL_CONDITION_SATISFIED            = $911C;
GL_WAIT_FAILED                    = $911D;
GL_SYNC_FLUSH_COMMANDS_BIT        = $00000001;
GL_TIMEOUT_IGNORED                = $FFFFFFFFFFFFFFFF;
GL_VERTEX_ATTRIB_ARRAY_DIVISOR    = $88FE;
GL_ANY_SAMPLES_PASSED             = $8C2F;
GL_ANY_SAMPLES_PASSED_CONSERVATIVE = $8D6A;
GL_SAMPLER_BINDING                = $8919;
GL_RGB10_A2UI                     = $906F;
GL_TEXTURE_SWIZZLE_R              = $8E42;
GL_TEXTURE_SWIZZLE_G              = $8E43;
GL_TEXTURE_SWIZZLE_B              = $8E44;
GL_TEXTURE_SWIZZLE_A              = $8E45;
GL_GREEN                          = $1904;
GL_BLUE                           = $1905;
GL_INT_2_10_10_10_REV             = $8D9F;
GL_TRANSFORM_FEEDBACK             = $8E22;
GL_TRANSFORM_FEEDBACK_PAUSED      = $8E23;
GL_TRANSFORM_FEEDBACK_ACTIVE      = $8E24;
GL_TRANSFORM_FEEDBACK_BINDING     = $8E25;
GL_PROGRAM_BINARY_RETRIEVABLE_HINT = $8257;
GL_PROGRAM_BINARY_LENGTH          = $8741;
GL_NUM_PROGRAM_BINARY_FORMATS     = $87FE;
GL_PROGRAM_BINARY_FORMATS         = $87FF;
GL_COMPRESSED_R11_EAC             = $9270;
GL_COMPRESSED_SIGNED_R11_EAC      = $9271;
GL_COMPRESSED_RG11_EAC            = $9272;
GL_COMPRESSED_SIGNED_RG11_EAC     = $9273;
GL_COMPRESSED_RGB8_ETC2           = $9274;
GL_COMPRESSED_SRGB8_ETC2          = $9275;
GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = $9276;
GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = $9277;
GL_COMPRESSED_RGBA8_ETC2_EAC      = $9278;
GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = $9279;
GL_TEXTURE_IMMUTABLE_FORMAT       = $912F;
GL_MAX_ELEMENT_INDEX              = $8D6B;
GL_NUM_SAMPLE_COUNTS              = $9380;
GL_TEXTURE_IMMUTABLE_LEVELS       = $82DF;


        // Re-implementation of functionality dropped from opengles
        GL_QUADS = $0007;
        GL_TEXTURE_ENV_MODE = $2200;
        GL_TEXTURE_ENV_COLOR = $2201;
        GL_TEXTURE_ENV = $2300;


        GL_MODULATE = $2100;

        GL_DOUBLE = $140A;

         GL_POINT_SIZE = $0B11;
         GL_POINT_SIZE_RANGE = $0B12;
         GL_POINT_SIZE_GRANULARITY = $0B13;
         GL_LINE_SMOOTH = $0B20;

         GL_LINE_WIDTH_RANGE = $0B22;
         GL_LINE_WIDTH_GRANULARITY = $0B23;
         GL_POLYGON_SMOOTH = $0B41;

         GL_ACCUM_CLEAR_VALUE = $0B80;

         GL_MATRIX_MODE = $0BA0;
         GL_NORMALIZE = $0BA1;
         GL_MODELVIEW_STACK_DEPTH = $0BA3;
         GL_PROJECTION_STACK_DEPTH = $0BA4;
         GL_TEXTURE_STACK_DEPTH = $0BA5;

         GL_MODELVIEW_MATRIX = $0BA6;
         GL_PROJECTION_MATRIX = $0BA7;
         GL_TEXTURE_MATRIX = $0BA8;
         GL_ATTRIB_STACK_DEPTH = $0BB0;
         GL_CLIENT_ATTRIB_STACK_DEPTH = $0BB1;
         GL_ALPHA_TEST = $0BC0;
         GL_ALPHA_TEST_FUNC = $0BC1;
         GL_ALPHA_TEST_REF = $0BC2;

         GL_BLEND_DST = $0BE0;
         GL_BLEND_SRC = $0BE1;

         GL_LOGIC_OP_MODE = $0BF0;
         GL_INDEX_LOGIC_OP = $0BF1;
         GL_COLOR_LOGIC_OP = $0BF2;
         GL_AUX_BUFFERS = $0C00;
         GL_DRAW_BUFFER = $0C01;

         GL_INDEX_CLEAR_VALUE = $0C20;
         GL_INDEX_WRITEMASK = $0C21;

         GL_INDEX_MODE = $0C30;
         GL_RGBA_MODE = $0C31;
         GL_DOUBLEBUFFER = $0C32;
         GL_STEREO = $0C33;

         GL_RENDER_MODE = $0C40;
         GL_PERSPECTIVE_CORRECTION_HINT = $0C50;
         GL_POINT_SMOOTH_HINT = $0C51;
         GL_LINE_SMOOTH_HINT = $0C52;
         GL_POLYGON_SMOOTH_HINT = $0C53;
         GL_FOG_HINT = $0C54;
         GL_TEXTURE_GEN_S = $0C60;
         GL_TEXTURE_GEN_T = $0C61;
         GL_TEXTURE_GEN_R = $0C62;
         GL_TEXTURE_GEN_Q = $0C63;

         GL_PIXEL_MAP_I_TO_I = $0C70;
  GL_PIXEL_MAP_S_TO_S = $0C71;
  GL_PIXEL_MAP_I_TO_R = $0C72;
  GL_PIXEL_MAP_I_TO_G = $0C73;
  GL_PIXEL_MAP_I_TO_B = $0C74;
  GL_PIXEL_MAP_I_TO_A = $0C75;
  GL_PIXEL_MAP_R_TO_R = $0C76;
  GL_PIXEL_MAP_G_TO_G = $0C77;
  GL_PIXEL_MAP_B_TO_B = $0C78;
  GL_PIXEL_MAP_A_TO_A = $0C79;
  GL_PIXEL_MAP_I_TO_I_SIZE = $0CB0;
  GL_PIXEL_MAP_S_TO_S_SIZE = $0CB1;
  GL_PIXEL_MAP_I_TO_R_SIZE = $0CB2;
  GL_PIXEL_MAP_I_TO_G_SIZE = $0CB3;
  GL_PIXEL_MAP_I_TO_B_SIZE = $0CB4;
  GL_PIXEL_MAP_I_TO_A_SIZE = $0CB5;
  GL_PIXEL_MAP_R_TO_R_SIZE = $0CB6;
  GL_PIXEL_MAP_G_TO_G_SIZE = $0CB7;
  GL_PIXEL_MAP_B_TO_B_SIZE = $0CB8;
  GL_PIXEL_MAP_A_TO_A_SIZE = $0CB9;


  GL_UNPACK_SWAP_BYTES = $0CF0;
  GL_UNPACK_LSB_FIRST = $0CF1;



  GL_PACK_SWAP_BYTES = $0D00;
  GL_PACK_LSB_FIRST = $0D01;





  GL_MAP_COLOR = $0D10;
  GL_MAP_STENCIL = $0D11;
  GL_INDEX_SHIFT = $0D12;
  GL_INDEX_OFFSET = $0D13;
  GL_RED_SCALE = $0D14;
  GL_RED_BIAS = $0D15;
  GL_ZOOM_X = $0D16;
  GL_ZOOM_Y = $0D17;
  GL_GREEN_SCALE = $0D18;
  GL_GREEN_BIAS = $0D19;
  GL_BLUE_SCALE = $0D1A;
  GL_BLUE_BIAS = $0D1B;
  GL_ALPHA_SCALE = $0D1C;
  GL_ALPHA_BIAS = $0D1D;
  GL_DEPTH_SCALE = $0D1E;
  GL_DEPTH_BIAS = $0D1F;
  GL_MAX_EVAL_ORDER = $0D30;
  GL_MAX_LIGHTS = $0D31;
  GL_MAX_CLIP_PLANES = $0D32;
  GL_MAX_PIXEL_MAP_TABLE = $0D34;
  GL_MAX_ATTRIB_STACK_DEPTH = $0D35;
  GL_MAX_MODELVIEW_STACK_DEPTH = $0D36;
  GL_MAX_NAME_STACK_DEPTH = $0D37;
  GL_MAX_PROJECTION_STACK_DEPTH = $0D38;
  GL_MAX_TEXTURE_STACK_DEPTH = $0D39;
  GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = $0D3B;


  GL_INDEX_BITS = $0D51;


  GL_ACCUM_RED_BITS = $0D58;
  GL_ACCUM_GREEN_BITS = $0D59;
  GL_ACCUM_BLUE_BITS = $0D5A;
  GL_ACCUM_ALPHA_BITS = $0D5B;
  GL_NAME_STACK_DEPTH = $0D70;
  GL_AUTO_NORMAL = $0D80;
  GL_MAP1_COLOR_4 = $0D90;
  GL_MAP1_INDEX = $0D91;
  GL_MAP1_NORMAL = $0D92;
  GL_MAP1_TEXTURE_COORD_1 = $0D93;
  GL_MAP1_TEXTURE_COORD_2 = $0D94;
  GL_MAP1_TEXTURE_COORD_3 = $0D95;
  GL_MAP1_TEXTURE_COORD_4 = $0D96;
  GL_MAP1_VERTEX_3 = $0D97;
  GL_MAP1_VERTEX_4 = $0D98;
  GL_MAP2_COLOR_4 = $0DB0;
  GL_MAP2_INDEX = $0DB1;
  GL_MAP2_NORMAL = $0DB2;
  GL_MAP2_TEXTURE_COORD_1 = $0DB3;
  GL_MAP2_TEXTURE_COORD_2 = $0DB4;
  GL_MAP2_TEXTURE_COORD_3 = $0DB5;
  GL_MAP2_TEXTURE_COORD_4 = $0DB6;
  GL_MAP2_VERTEX_3 = $0DB7;
  GL_MAP2_VERTEX_4 = $0DB8;
  GL_MAP1_GRID_DOMAIN = $0DD0;
  GL_MAP1_GRID_SEGMENTS = $0DD1;
  GL_MAP2_GRID_DOMAIN = $0DD2;
  GL_MAP2_GRID_SEGMENTS = $0DD3;

  GL_TEXTURE_1D = $0DE0;

  GL_FEEDBACK_BUFFER_POINTER = $0DF0;
  GL_FEEDBACK_BUFFER_SIZE = $0DF1;
  GL_FEEDBACK_BUFFER_TYPE = $0DF2;
  GL_SELECTION_BUFFER_POINTER = $0DF3;
  GL_SELECTION_BUFFER_SIZE = $0DF4;

  GL_TEXTURE_WIDTH = $1000;
  GL_TEXTURE_HEIGHT = $1001;
  GL_TEXTURE_INTERNAL_FORMAT = $1003;
  GL_TEXTURE_BORDER_COLOR = $1004;
  GL_TEXTURE_BORDER = $1005;
  GL_TEXTURE_RED_SIZE = $805C;
  GL_TEXTURE_GREEN_SIZE = $805D;
  GL_TEXTURE_BLUE_SIZE = $805E;
  GL_TEXTURE_ALPHA_SIZE = $805F;

  GL_LIGHT0 = $4000;
  GL_LIGHT1 = $4001;
  GL_LIGHT2 = $4002;
  GL_LIGHT3 = $4003;
  GL_LIGHT4 = $4004;
  GL_LIGHT5 = $4005;
  GL_LIGHT6 = $4006;
  GL_LIGHT7 = $4007;

  GL_AMBIENT = $1200;
  GL_DIFFUSE = $1201;
  GL_SPECULAR = $1202;
  GL_POSITION = $1203;
  GL_SPOT_DIRECTION = $1204;
  GL_SPOT_EXPONENT = $1205;
  GL_SPOT_CUTOFF = $1206;

  GL_CONSTANT_ATTENUATION = $1207;
  GL_LINEAR_ATTENUATION = $1208;
  GL_QUADRATIC_ATTENUATION = $1209;
  GL_COMPILE = $1300;
  GL_COMPILE_AND_EXECUTE = $1301;

  GL_CLEAR = $1500;
  GL_AND = $1501;
  GL_AND_REVERSE = $1502;
  GL_COPY = $1503;
  GL_AND_INVERTED = $1504;
  GL_NOOP = $1505;
  GL_XOR = $1506;
  GL_OR = $1507;
  GL_NOR = $1508;
  GL_EQUIV = $1509;

  GL_OR_REVERSE = $150B;
  GL_COPY_INVERTED = $150C;
  GL_OR_INVERTED = $150D;
  GL_NAND = $150E;
  GL_SET = $150F;

  GL_EMISSION = $1600;
  GL_SHININESS = $1601;
  GL_AMBIENT_AND_DIFFUSE = $1602;
  GL_COLOR_INDEXES = $1603;
  GL_MODELVIEW = $1700;
  GL_PROJECTION = $1701;
  GL_COLOR_INDEX = $1900;
  GL_STENCIL_INDEX = $1901;

  GL_BITMAP = $1A00;
  GL_RENDER = $1C00;
  GL_FEEDBACK = $1C01;
  GL_SELECT = $1C02;
  GL_FLAT = $1D00;
  GL_SMOOTH = $1D01;

  GL_POINT = $1B00;
  GL_LINE = $1B01;
  GL_FILL = $1B02;

  GL_S = $2000;
  GL_T = $2001;
  GL_R = $2002;
  GL_Q = $2003;

  GL_DECAL = $2101;
  GL_EYE_LINEAR = $2400;
  GL_OBJECT_LINEAR = $2401;
  GL_SPHERE_MAP = $2402;

  GL_TEXTURE_GEN_MODE = $2500;
  GL_OBJECT_PLANE = $2501;
  GL_EYE_PLANE = $2502;
  GL_CLAMP = $2900;

  GL_CLIENT_PIXEL_STORE_BIT = $00000001;
  GL_CLIENT_VERTEX_ARRAY_BIT = $00000002;
  GL_CLIENT_ALL_ATTRIB_BITS = $FFFFFFFF;


  GL_POLYGON_OFFSET_POINT = $2A01;
  GL_POLYGON_OFFSET_LINE = $2A02;



  GL_ALPHA4 = $803B;
  GL_ALPHA8 = $803C;
  GL_ALPHA12 = $803D;
  GL_ALPHA16 = $803E;

  GL_LUMINANCE4 = $803F;
  GL_LUMINANCE8 = $8040;
  GL_LUMINANCE12 = $8041;
  GL_LUMINANCE16 = $8042;
  GL_LUMINANCE4_ALPHA4 = $8043;
  GL_LUMINANCE6_ALPHA2 = $8044;
  GL_LUMINANCE8_ALPHA8 = $8045;
  GL_LUMINANCE12_ALPHA4 = $8046;
  GL_LUMINANCE12_ALPHA12 = $8047;
  GL_LUMINANCE16_ALPHA16 = $8048;
  GL_INTENSITY = $8049;
  GL_INTENSITY4 = $804A;
  GL_INTENSITY8 = $804B;
  GL_INTENSITY12 = $804C;
  GL_INTENSITY16 = $804D;

  GL_R3_G3_B2 = $2A10;
  GL_RGB4 = $804F;
  GL_RGB5 = $8050;

  GL_RGB10 = $8052;
  GL_RGB12 = $8053;
  GL_RGB16 = $8054;
  GL_RGBA2 = $8055;


  GL_RGBA12 = $805A;
  GL_RGBA16 = $805B;

  GL_TEXTURE_LUMINANCE_SIZE = $8060;
  GL_TEXTURE_INTENSITY_SIZE = $8061;
  GL_TEXTURE_PRIORITY = $8066;
  GL_TEXTURE_RESIDENT = $8067;

    { TextureTarget }
  GL_PROXY_TEXTURE_1D = $8063;
  GL_PROXY_TEXTURE_2D = $8064;



  GL_TEXTURE_BINDING_1D = $8068;


  GL_VERTEX_ARRAY = $8074;
  GL_NORMAL_ARRAY = $8075;
  GL_COLOR_ARRAY = $8076;
  GL_INDEX_ARRAY = $8077;

  GL_TEXTURE_COORD_ARRAY = $8078;
  GL_EDGE_FLAG_ARRAY = $8079;

  GL_VERTEX_ARRAY_SIZE = $807A;
  GL_VERTEX_ARRAY_TYPE = $807B;
  GL_VERTEX_ARRAY_STRIDE = $807C;
  GL_NORMAL_ARRAY_TYPE = $807E;
  GL_NORMAL_ARRAY_STRIDE = $807F;
  GL_COLOR_ARRAY_SIZE = $8081;
  GL_COLOR_ARRAY_TYPE = $8082;
  GL_COLOR_ARRAY_STRIDE = $8083;
  GL_INDEX_ARRAY_TYPE = $8085;
  GL_INDEX_ARRAY_STRIDE = $8086;
  GL_TEXTURE_COORD_ARRAY_SIZE = $8088;
  GL_TEXTURE_COORD_ARRAY_TYPE = $8089;
  GL_TEXTURE_COORD_ARRAY_STRIDE = $808A;

  GL_EDGE_FLAG_ARRAY_STRIDE = $808C;
  GL_VERTEX_ARRAY_POINTER = $808E;
  GL_NORMAL_ARRAY_POINTER = $808F;
  GL_COLOR_ARRAY_POINTER = $8090;
  GL_INDEX_ARRAY_POINTER = $8091;
  GL_TEXTURE_COORD_ARRAY_POINTER = $8092;
  GL_EDGE_FLAG_ARRAY_POINTER = $8093;
  GL_V2F = $2A20;
  GL_V3F = $2A21;
  GL_C4UB_V2F = $2A22;
  GL_C4UB_V3F = $2A23;
  GL_C3F_V3F = $2A24;
  GL_N3F_V3F = $2A25;
  GL_C4F_N3F_V3F = $2A26;
  GL_T2F_V3F = $2A27;
  GL_T4F_V4F = $2A28;
  GL_T2F_C4UB_V3F = $2A29;
  GL_T2F_C3F_V3F = $2A2A;
  GL_T2F_N3F_V3F = $2A2B;
  GL_T2F_C4F_N3F_V3F = $2A2C;
  GL_T4F_C4F_N3F_V4F = $2A2D;
  GL_COLOR_TABLE_FORMAT_EXT = $80D8;
  GL_COLOR_TABLE_WIDTH_EXT = $80D9;
  GL_COLOR_TABLE_RED_SIZE_EXT = $80DA;
  GL_COLOR_TABLE_GREEN_SIZE_EXT = $80DB;
  GL_COLOR_TABLE_BLUE_SIZE_EXT = $80DC;
  GL_COLOR_TABLE_ALPHA_SIZE_EXT = $80DD;
  GL_COLOR_TABLE_LUMINANCE_SIZE_EXT = $80DE;
  GL_COLOR_TABLE_INTENSITY_SIZE_EXT = $80DF;
  GL_LOGIC_OP = GL_INDEX_LOGIC_OP;
  GL_TEXTURE_COMPONENTS = GL_TEXTURE_INTERNAL_FORMAT;

  // GL_EXT_vertex_array
  GL_VERTEX_ARRAY_EXT = $8074;
  GL_NORMAL_ARRAY_EXT = $8075;
  GL_COLOR_ARRAY_EXT = $8076;
  GL_INDEX_ARRAY_EXT = $8077;
  GL_TEXTURE_COORD_ARRAY_EXT = $8078;
  GL_EDGE_FLAG_ARRAY_EXT = $8079;
  GL_VERTEX_ARRAY_SIZE_EXT = $807A;
  GL_VERTEX_ARRAY_TYPE_EXT = $807B;
  GL_VERTEX_ARRAY_STRIDE_EXT = $807C;
  GL_VERTEX_ARRAY_COUNT_EXT = $807D;
  GL_NORMAL_ARRAY_TYPE_EXT = $807E;
  GL_NORMAL_ARRAY_STRIDE_EXT = $807F;
  GL_NORMAL_ARRAY_COUNT_EXT = $8080;
  GL_COLOR_ARRAY_SIZE_EXT = $8081;
  GL_COLOR_ARRAY_TYPE_EXT = $8082;
  GL_COLOR_ARRAY_STRIDE_EXT = $8083;
  GL_COLOR_ARRAY_COUNT_EXT = $8084;
  GL_INDEX_ARRAY_TYPE_EXT = $8085;
  GL_INDEX_ARRAY_STRIDE_EXT = $8086;
  GL_INDEX_ARRAY_COUNT_EXT = $8087;
  GL_TEXTURE_COORD_ARRAY_SIZE_EXT = $8088;
  GL_TEXTURE_COORD_ARRAY_TYPE_EXT = $8089;
  GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = $808A;
  GL_TEXTURE_COORD_ARRAY_COUNT_EXT = $808B;
  GL_EDGE_FLAG_ARRAY_STRIDE_EXT = $808C;
  GL_EDGE_FLAG_ARRAY_COUNT_EXT = $808D;
  GL_VERTEX_ARRAY_POINTER_EXT = $808E;
  GL_NORMAL_ARRAY_POINTER_EXT = $808F;
  GL_COLOR_ARRAY_POINTER_EXT = $8090;
  GL_INDEX_ARRAY_POINTER_EXT = $8091;
  GL_TEXTURE_COORD_ARRAY_POINTER_EXT = $8092;
  GL_EDGE_FLAG_ARRAY_POINTER_EXT = $8093;

  // GL_EXT_bgra
  GL_BGR_EXT = $80E0;
  GL_BGRA_EXT = $80E1;

  // GL_EXT_paletted_texture
  GL_COLOR_INDEX1_EXT = $80E2;
  GL_COLOR_INDEX2_EXT = $80E3;
  GL_COLOR_INDEX4_EXT = $80E4;
  GL_COLOR_INDEX8_EXT = $80E5;
  GL_COLOR_INDEX12_EXT = $80E6;
  GL_COLOR_INDEX16_EXT = $80E7;
  GL_TEXTURE_INDEX_SIZE_EXT = $80ED;




        GL_QUAD_STRIP = $0008;

        GL_POLYGON = $0009;


        GL_ACCUM = $0100;
        GL_LOAD = $0101;
        GL_RETURN = $0102;
        GL_MULT = $0103;
        GL_ADD = $0104;

        GL_CURRENT_BIT = $00000001;
        GL_POINT_BIT = $00000002;
        GL_LINE_BIT = $00000004;
        GL_POLYGON_BIT = $00000008;
        GL_POLYGON_STIPPLE_BIT = $00000010;
        GL_PIXEL_MODE_BIT = $00000020;
        GL_LIGHTING_BIT = $00000040;
        GL_FOG_BIT = $00000080;
        GL_ACCUM_BUFFER_BIT = $00000200;
        GL_VIEWPORT_BIT = $00000800;
        GL_TRANSFORM_BIT = $00001000;
        GL_ENABLE_BIT = $00002000;
        GL_HINT_BIT = $00008000;
        GL_EVAL_BIT = $00010000;
        GL_LIST_BIT = $00020000;
        GL_TEXTURE_BIT = $00040000;
        GL_SCISSOR_BIT = $00080000;
        GL_ALL_ATTRIB_BITS = $000FFFFF;



        GL_CLIP_PLANE0 = $3000;
        GL_CLIP_PLANE1 = $3001;
        GL_CLIP_PLANE2 = $3002;
        GL_CLIP_PLANE3 = $3003;
        GL_CLIP_PLANE4 = $3004;
        GL_CLIP_PLANE5 = $3005;
        GL_2_BYTES = $1407;
        GL_3_BYTES = $1408;
        GL_4_BYTES = $1409;

        GL_FRONT_LEFT = $0400;
  GL_FRONT_RIGHT = $0401;
  GL_BACK_LEFT = $0402;
  GL_BACK_RIGHT = $0403;


  GL_LEFT = $0406;
  GL_RIGHT = $0407;


  GL_AUX0 = $0409;
  GL_AUX1 = $040A;
  GL_AUX2 = $040B;
  GL_AUX3 = $040C;
  GL_STACK_OVERFLOW = $0503;
  GL_STACK_UNDERFLOW = $0504;

        // GL_ARB_pixel_buffer_object
  GL_PIXEL_PACK_BUFFER_ARB = $88EB;
  GL_PIXEL_UNPACK_BUFFER_ARB = $88EC;
  GL_PIXEL_PACK_BUFFER_BINDING_ARB = $88ED;
  GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = $88EF;

  // GL_ARB_vertex_buffer_object
  GL_BUFFER_SIZE_ARB = $8764;
  GL_BUFFER_USAGE_ARB = $8765;
  GL_ARRAY_BUFFER_ARB = $8892;
  GL_ELEMENT_ARRAY_BUFFER_ARB = $8893;
  GL_ARRAY_BUFFER_BINDING_ARB = $8894;
  GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = $8895;
  GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = $8896;
  GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = $8897;
  GL_COLOR_ARRAY_BUFFER_BINDING_ARB = $8898;
  GL_INDEX_ARRAY_BUFFER_BINDING_ARB = $8899;
  GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = $889A;
  GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = $889B;
  GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = $889C;
  GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = $889D;
  GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = $889E;
  GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = $889F;
  GL_READ_ONLY_ARB = $88B8;
  GL_WRITE_ONLY_ARB = $88B9;
  GL_READ_WRITE_ARB = $88BA;
  GL_BUFFER_ACCESS_ARB = $88BB;
  GL_BUFFER_MAPPED_ARB = $88BC;
  GL_BUFFER_MAP_POINTER_ARB = $88BD;
  GL_STREAM_DRAW_ARB = $88E0;
  GL_STREAM_READ_ARB = $88E1;
  GL_STREAM_COPY_ARB = $88E2;
  GL_STATIC_DRAW_ARB = $88E4;
  GL_STATIC_READ_ARB = $88E5;
  GL_STATIC_COPY_ARB = $88E6;
  GL_DYNAMIC_DRAW_ARB = $88E8;
  GL_DYNAMIC_READ_ARB = $88E9;
  GL_DYNAMIC_COPY_ARB = $88EA;

  GL_2D = $0600;
  GL_3D = $0601;
  GL_3D_COLOR = $0602;
  GL_3D_COLOR_TEXTURE = $0603;
  GL_4D_COLOR_TEXTURE = $0604;
  GL_PASS_THROUGH_TOKEN = $0700;
  GL_POINT_TOKEN = $0701;
  GL_LINE_TOKEN = $0702;
  GL_POLYGON_TOKEN = $0703;
  GL_BITMAP_TOKEN = $0704;
  GL_DRAW_PIXEL_TOKEN = $0705;
  GL_COPY_PIXEL_TOKEN = $0706;
  GL_LINE_RESET_TOKEN = $0707;

  GL_EXP = $0800;
  GL_EXP2 = $0801;
  GL_COEFF = $0A00;
  GL_ORDER = $0A01;
  GL_DOMAIN = $0A02;
  GL_CURRENT_COLOR = $0B00;
  GL_CURRENT_INDEX = $0B01;
  GL_CURRENT_NORMAL = $0B02;
  GL_CURRENT_TEXTURE_COORDS = $0B03;
  GL_CURRENT_RASTER_COLOR = $0B04;
  GL_CURRENT_RASTER_INDEX = $0B05;
  GL_CURRENT_RASTER_TEXTURE_COORDS = $0B06;
  GL_CURRENT_RASTER_POSITION = $0B07;
  GL_CURRENT_RASTER_POSITION_VALID = $0B08;
  GL_CURRENT_RASTER_DISTANCE = $0B09;
  GL_POINT_SMOOTH = $0B10;
  GL_LINE_STIPPLE = $0B24;
  GL_LINE_STIPPLE_PATTERN = $0B25;
  GL_LINE_STIPPLE_REPEAT = $0B26;
  GL_LIST_MODE = $0B30;
  GL_MAX_LIST_NESTING = $0B31;
  GL_LIST_BASE = $0B32;
  GL_LIST_INDEX = $0B33;
  GL_POLYGON_MODE = $0B40;
  GL_POLYGON_STIPPLE = $0B42;
  GL_EDGE_FLAG = $0B43;
  GL_LIGHTING = $0B50;
  GL_LIGHT_MODEL_LOCAL_VIEWER = $0B51;
  GL_LIGHT_MODEL_TWO_SIDE = $0B52;
  GL_LIGHT_MODEL_AMBIENT = $0B53;
  GL_SHADE_MODEL = $0B54;
  GL_COLOR_MATERIAL_FACE = $0B55;
  GL_COLOR_MATERIAL_PARAMETER = $0B56;
  GL_COLOR_MATERIAL = $0B57;
  GL_FOG = $0B60;
  GL_FOG_INDEX = $0B61;
  GL_FOG_DENSITY = $0B62;
  GL_FOG_START = $0B63;
  GL_FOG_END = $0B64;
  GL_FOG_MODE = $0B65;
  GL_FOG_COLOR = $0B66;






type
  GLenum = Cardinal;
  GLuint = Cardinal;
  PGLuint = ^GLuint;
  GLsizei = Integer;
  PGLsizei = ^GLsizei;
  GLint = Integer;
  PGlint  = ^Glint;
  GLfloat = Single;
  PGLfloat = ^GLfloat;
  GLbitfield = Cardinal;
  GLboolean = BYTEBOOL;
  GLchar = AnsiChar;
  PGLchar = PAnsiChar;
  PPGLchar = ^PGLChar;
  GLubyte = Byte;

  // Extra stuff not implemented in OpenGLES anymore

  TGLMatrixf4  = array[0..3, 0..3] of GLfloat;

  TGLVectori4  = array[0..3] of GLint;

  GLsizeiptrARB = GLsizei;

  PGLvoid = Pointer;

  GLshort = SmallInt;
  GLdouble = Double;
  PGLdouble = ^GLdouble;

function glGetString(name: GLenum): String;

procedure checkGlError(tag: string);

function glGetError(): GLenum; {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glGetError';

function glCreateShader (shader_type: GLenum): GLenum; {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glCreateShader';

procedure glViewport (x,y: GLint; width, height: GLsizei); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glViewport';


procedure glClearColor(red, green, blue, alpha: GLfloat); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glClearColor';

procedure glClear (mask: GLbitfield); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glClear';

procedure glUseProgram(prog: GLuint); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glUseProgram';

procedure glVertexAttribPointer(index: GLuint; size: GLint; typeA: GLenum; normalized: GLboolean; stride: GLsizei; pt: Pointer); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glVertexAttribPointer';

procedure glEnableVertexAttribArray (index: GLuint); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glEnableVertexAttribArray';

procedure glDrawArrays(mode: GLenum; first: GLint; count: GLsizei); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glDrawArrays';


function createProgram(vertexSource, fragmentSource: String): GLuint;

function glGetAttribLocation(prog: GLuint; name: String): GLint;

procedure printGLString(name: String; s: GLenum);

procedure glGenVertexArrays (n: GLsizei; arrays: PGLuint); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glGenVertexArrays';

procedure glBindVertexArray(array_ : GLuint); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glBindVertexArray';

procedure glGenBuffers (n: GLsizei; buffers: PGLuint); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glGenBuffers';

procedure glBindBuffer(target: GLenum; array_ : GLuint); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glBindBuffer';

procedure glBufferData (target: GLenum; size_:GLsizei; data: Pointer; usage: GLenum); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glBufferData';


procedure glShaderSource (shader: GLuint; count: GLsizei;  source_code_string_array: PPGLChar; length_array: pglint); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glShaderSource';

procedure glCompileShader(shader: GLuint); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glCompileShader';


procedure glGetShaderiv (shader: GLuint; pname: GLenum; params: PGLint); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glGetShaderiv';

function loadShader(shaderType: GLenum; sourceCode: String): GLuint;

function PCharFromString(s: string): PChar;

function glCreateProgram(): GLuint;  {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glCreateProgram';

procedure glAttachShader(prog,shader: GLuint); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glAttachShader';


procedure glLinkProgram (prog: GLuint); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glLinkProgram';


procedure glGetProgramiv(prog: GLuint; pname: GLenum; params: PGLint); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glGetProgramiv';

procedure glGetProgramInfoLog(prog: GLuint; bufSize: GLsizei ; len: PGLsizei; infoLog: PByte); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glGetProgramInfoLog';

procedure glDeleteProgram(prog: GLuint); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glDeleteProgram';


procedure glDeleteShader(shader: GLuint); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glDeleteShader';

procedure glGenTextures (n:GLsizei; textures: PGLuint); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glGenTextures';

procedure glDeleteTextures (n:GLsizei; textures: PGLuint); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glDeleteTextures';

procedure glBindTexture (target: GLenum; texture: GLuint); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glBindTexture';

procedure glTexParameteri (target: GLenum; pname: GLenum; param: GLint); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glTexParameteri';

procedure glTexImage2D (target: GLenum; level,internalformat: GLint; width,height: GLsizei; border: GLint; format,type_: GLenum; pixels: pointer); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glTexImage2D';

procedure glCopyTexSubImage2D (target: GLenum; level, xoffset, yoffset, x, y: GLint; width,height: GLsizei); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glCopyTexSubImage2D';

procedure glEnable (cap: GLenum); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glEnable';

procedure glBlendFunc (sfactor, dfactor: GLenum); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glBlendFunc';

procedure glDisable (cap: GLenum); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glDisable';

procedure glGetIntegerv (pname: GLenum; data: PGlint); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glGetIntegerv';

procedure glReadPixels (x,y: GLint; widht, height: GLsizei; format,type_: GLenum; pixels: pointer); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glReadPixels';


procedure glTexSubImage2D (target: GLenum; level,xoffset,yoffset: GLint; width,height: GLsizei; format,type_: GLenum;pixels: pointer); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glTexSubImage2D';

procedure glGetFloatv (pname: GLenum; data: PGLfloat); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glGetFloatv';

procedure glPixelStorei (pname: GLenum; param: GLint); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glPixelStorei';

procedure glDepthRangef (n,f: GLfloat);  {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glDepthRangef';

procedure glDepthFunc (func: GLenum); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glDepthFunc';


procedure glScissor (x,y: GLint; width,height: GLsizei); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glScissor';

procedure glLineWidth (width: GLfloat); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glLineWidth';

procedure glTexParameterf (target,pname: GLenum; param:GLfloat); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glTexParameterf';

procedure glCullFace(mode: GLenum); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glCullFace';

procedure glFinish (); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glFinish';
procedure glFlush (); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glFlush';

procedure glFrontFace (mode: GLenum); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glFrontFace';

procedure glReadBuffer (src: GLenum);  {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glReadBuffer';

// Exta functions

procedure draw_rectangle_quads_opengles(left: GLFloat; top: GLFloat; right: GLFloat; bottom: GLFloat;
  tx1: GLfloat; ty1: GLfloat; tx2: GLFloat; ty2: GLFloat; tex_num: GLenum);

procedure draw_rectangle_quads_opengles_color(left: GLFloat; top: GLFloat; right: GLFloat; bottom: GLFloat;
  r1,g1,b1,alpha1,r2,g2,b2,alpha2,r3,g3,b3,alpha3,r4,g4,b4,alpha4: GLFloat;
  tx1: GLfloat; ty1: GLfloat; tx2: GLFloat; ty2: GLFloat; tex_num: GLenum);

procedure draw_quads_opengles_z(x1,y1,x2,y2,x3,y3,x4,y4, z: GLFloat;
  tx1,ty1,tx2,ty2,tx3,ty3,tx4,ty4: GLFloat; tex_num:  GLenum);


procedure draw_quads_opengles_z_color(x1,y1,z1,x2,y2,z2,
  x3,y3,z3,x4,y4, z4: GLFloat;
  tx1,ty1,tx2,ty2,tx3,ty3,tx4,ty4: GLFloat;
  r1,g1,b1,alpha1,r2,g2,b2,alpha2,r3,g3,b3,alpha3,r4,g4,b4,alpha4: GLFloat;
  tex_num:  GLenum);

procedure draw_quads_opengles_color(x1,y1,x2,y2,
  x3,y3,x4,y4: GLFloat;
  tx1,ty1,tx2,ty2,tx3,ty3,tx4,ty4: GLFloat;
  r1,g1,b1,alpha1,r2,g2,b2,alpha2,r3,g3,b3,alpha3,r4,g4,b4,alpha4: GLFloat;
  tex_num:  GLenum);


function setupGraphicsAndroid: boolean;

function openGLESexampleProgram: boolean;

procedure openGLESexampleProgramRenderFrame();

// Procedure to be re-implemented because they were dropped from openGLES

procedure glColor4f(red: GLfloat; green: GLfloat; blue: GLfloat; alpha: GLfloat);

procedure glbegin(mode: GLenum);

procedure glEnd();

procedure glVertex2f(x,y: GLfloat);

procedure glColor3f(red,green,blue: GLfloat);

procedure glTexEnvf(target: GLenum; pname: GLenum; param: GLfloat);

procedure glTexCoord1d(s: GLdouble);

procedure glTexCoord1f(s: GLfloat);

procedure glTexCoord2f(s: GLfloat; t: GLfloat);
procedure glTexCoord2d(s: GLdouble; t: GLdouble);

procedure glTexCoord3f(s: GLfloat; t: GLfloat; r: GLfloat);
procedure glTexCoord3d(s: GLdouble; t: GLdouble; r: GLdouble);

procedure glTexEnvi(target: GLenum; pname: GLenum; param: GLint);

procedure glVertex3f (x: GLfloat; y: GLfloat; z: GLfloat);
procedure glVertex3d(x: GLdouble; y: GLdouble; z: GLdouble);
procedure glVertex4f(x: GLfloat; y: GLfloat; z: GLfloat; w: GLfloat);
procedure glVertex4d(x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble);

procedure glGenBuffersARB(n: GLsizei; buffers: PGLuint);

procedure glBindBufferARB(target: GLenum; buffer: GLuint);

procedure glDeleteBuffersARB (n: GLsizei; const buffers: PGLuint);


procedure glBufferDataARB(target: GLenum; size: GLsizeiptrARB; const data: PGLvoid; usage: GLenum);

function glMapBufferARB (target: GLenum; access: GLenum): PGLvoid;

function glUnmapBufferARB (target: GLenum): GLboolean;

procedure glDepthRange (n,f: GLfloat);

procedure glMatrixMode (mode: GLenum);

procedure glPushMatrix();

procedure glTranslatef(x: GLfloat; y: GLfloat; z: GLfloat);
procedure glTranslated(x: GLDouble; y: GLDouble; z: GLDouble);

procedure glScalef(x: GLfloat; y: GLfloat; z: GLfloat);

procedure glVertex2s(x: GLshort; y: GLshort);
procedure glVertex2d(x: GLdouble; y: GLdouble);

procedure glPopMatrix();


procedure glClipPlane(plane: GLenum; const equation: PGLdouble);

procedure glClearAccum(red: GLfloat; green: GLfloat; blue: GLfloat; alpha: GLfloat);

procedure glColor3d(red: GLdouble; green: GLdouble; blue: GLdouble);
procedure glColor4d(red: GLdouble; green: GLdouble; blue: GLdouble; alpha: GLdouble);

procedure glDisableClientState(_array: GLenum);

procedure glDrawBuffer(mode: GLenum);

procedure glEnableClientState(_array: GLenum);

procedure glEndList();

procedure glInitNames();

procedure glLoadIdentity();

procedure glLogicOp(opcode: GLenum);

procedure glOrthof (left: GLfloat; right: GLfloat; bottom: GLfloat; top: GLfloat; zNear: GLfloat; zFar: GLfloat);

procedure glPopAttrib();

procedure glPopClientAttrib();

procedure glPopName();

procedure glRasterPos2d(x: GLdouble; y: GLdouble);

procedure glRasterPos3d(x: GLdouble; y: GLdouble; z: GLdouble);

procedure glRasterPos4d(x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble);

procedure glRectd(x1: GLdouble; y1: GLdouble; x2: GLdouble; y2: GLdouble);

procedure glRotated(angle: GLdouble; x: GLdouble; y: GLdouble; z: GLdouble);

procedure glScaled(x: GLdouble; y: GLdouble; z: GLdouble);

procedure glShadeModel(mode: GLenum);

procedure glTexCoord4d(s: GLdouble; t: GLdouble; r: GLdouble; q: GLdouble);

procedure glTexCoord4f(s: GLfloat; t: GLfloat; r: GLfloat; q: GLfloat);

var

  Screen: PSDL_Window;




implementation

{$IF Defined(ANDROID)}
uses

      UJniCallback;
{$IFEND}

var
  actualScreen: TSDL_Window;  // To ensure persistance of the data behind PDSL_Window
  sdl_wait_event: TSDL_Event;  // This can't be local, otherwise we get a segmentation fault
  glesContext: TSDL_GLContext;  // This too has to be persistent
  screenSurface: PSDL_Surface;  // For accessing the native surace
  shader_fragments : array of PGLChar = ();  // to guarantee the persistence of the shader code


  // This is a bit more experimental stuff
  gvPositionHandle, gProgram: GLuint;
  grey: GLfloat;
  gTriangleVertices: array[0..5] of GLfloat = (0.0, 0.5, -0.5, -0.5, 0.5, -0.5);



// Internal call to gl function for glGetString
function __glGetString(name: GLenum): PAnsiChar; {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glGetString';






procedure __glGetShaderInfoLog(shader: GLuint; bufSize: GLsizei; length:PGLsizei; infoLog: PByte); {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glGetShaderInfoLog';









function __glGetAttribLocation(prog: GLuint; name: PGLChar): GLint; {$IFDEF WINDOWS}stdcall; {$ELSE}cdecl; {$ENDIF} external gles_lib name 'glGetAttribLocation';



// Don't forget FreeMem(Buffer,Length(s) + 1) once you're done with the buffer returned
// by this function
function PCharFromString(s: string): PChar;
begin
    PCharFromString:=PChar(GetMem(Length(s) + 1));
    Move(s[1], PCharFromString[0], Length(s) + 1);
    PCharFromString[Length(s)]:=#0;
end;





procedure printGLString(name: String; s: GLenum);
var
  v : String;
begin
    v:=glGetString(s);
    {$IF Defined(ANDROID)}
      debug_message_to_android('GL '+name+' = '+v);
    {$IFEND}
  end;


function glGetString(name: GLenum): String;
begin
   glGetString:=__glGetString(name);
end;

procedure checkGlError(tag: string);
var theError:  GLint;
begin
  theError:=glGetError();
  while(theError <> 0) do begin
      {$IF Defined(ANDROID)}
      debug_message_to_android(tag+' got GL error number '+IntToStr(theError));
      {$IFEND}
      theError:=glGetError();
  end;

end;


function glGetAttribLocation(prog: GLuint; name: String): GLint;

var
  Buffer: PGLchar;
  ind: integer;
begin
  Buffer:=PCharFromString(name);

   glGetAttribLocation:=__glGetAttribLocation(prog, Buffer);
   FreeMem(Buffer,Length(name) + 1);
end;




function loadShader(shaderType: GLenum; sourceCode: String): GLuint;
var

  retBuffer: array of Byte;
  ind: integer;
  compiled: GLint;
  shader: GLUint;
  infoLen: GLint;
  length_for_length_array: GLint;

begin
  setLength(shader_fragments,length(shader_fragments)+1);

  shader_fragments[length(shader_fragments)]:=PCharFromString(sourceCode);

  shader:=glCreateShader(shaderType);

  if shader>0 then begin

  length_for_length_array:=length(sourceCode);

   glShaderSource(shader, 1, PPGLchar(@shader_fragments[length(shader_fragments)]), @length_for_length_array);
   glCompileShader(shader);


   compiled := 0;
   glGetShaderiv(shader, GL_COMPILE_STATUS, @compiled);

   if compiled = 0 then begin
     {$IF Defined(ANDROID)}
      debug_message_to_android('Compilation of shader failed: '+sourceCode);
      {$IFEND}
     infoLen:=0;
     glGetShaderiv(shader, GL_INFO_LOG_LENGTH, @infoLen);
     if (infoLen>0) then begin
       setLength(retBuffer,infoLen);
       __glGetShaderInfoLog(shader, infoLen, nil, @retBuffer[0]);
       {$IF Defined(ANDROID)}
      debug_message_to_android(String(TEncoding.ANSI.GetString(retBuffer)));
      {$IFEND}

      glDeleteShader(shader);
      shader := 0;
     end;
   end;

  end;
  loadShader:=shader;
end;


function createProgram(vertexSource, fragmentSource: String): GLuint;
var
  vertexShader,pixelShader,prog: GLuint;
  linkStatus, bufLength: GLint;
  buf: array of byte;
begin
  vertexShader := loadShader(GL_VERTEX_SHADER, vertexSource);


  if (vertexShader = 0) then exit(0);


  pixelShader := loadShader(GL_FRAGMENT_SHADER, fragmentSource);


  if (pixelShader =0) then exit(0);

  prog := glCreateProgram();
  if (prog <> 0) then begin
    glAttachShader(prog, vertexShader);
    checkGlError('glAttachShader');
    glAttachShader(prog, pixelShader);
    checkGlError('glAttachShader');
    glLinkProgram(prog);
    linkStatus := GL_FALSE;
    glGetProgramiv(prog, GL_LINK_STATUS, @linkStatus);
    if (linkStatus <> GL_TRUE) then begin
      bufLength := 0;
      glGetProgramiv(prog, GL_INFO_LOG_LENGTH, @bufLength);
      if (bufLength > 0) then begin
       setLength(buf,bufLength);
       glGetProgramInfoLog(prog, bufLength, nil, @buf[0]);
       {$IF Defined(ANDROID)}
      debug_message_to_android('Could not link program, error='+String(TEncoding.ANSI.GetString(buf)));
      {$IFEND}
       setlength(buf,0);

      end;
      glDeleteProgram(prog);
      prog := 0;
  end;
end;

  createProgram:=prog;







end;



function setupGraphicsAndroid: boolean;
    var

    displayID: TSDL_DisplayID;
    displayMode: TSDL_DisplayMode;


    go_on: boolean;


begin



  if(SDL_Init(SDL_INIT_VIDEO)<0) then begin
    debug_message_to_android('Failed to launch SDL');
    exit(false);
  end;

  SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
   SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK,    SDL_GL_CONTEXT_PROFILE_ES);
   SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);
   SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 24);
   SDL_GL_SetAttribute(SDL_GL_ACCELERATED_VISUAL,1);

   {$IFDEF UseSDL3}
   displayID:=SDL_GetPrimaryDisplay();
   displayMode:=SDL_GetCurrentDisplayMode(displayID)^;
   {$ELSE}
   displayID:=0;
   SDL_GetCurrentDisplayMode(displayID,@displayID);
   {$ENDIF}


   debug_message_to_android('Detected display w='+IntToStr(displayMode.w)+' h='+IntToStr(displayMode.h));


    // Create our window centered at display resolution
     {$IFDEF UseSDL3}
    Screen := SDL_CreateWindow('title',displayMode.w, displayMode.h, SDL_WINDOW_OPENGL or SDL_WINDOW_SHOWN or SDL_WINDOW_FULLSCREEN);
      {$ELSE}
     Screen := SDL_CreateWindow('title',SDL_WINDOWPOS_CENTERED,SDL_WINDOWPOS_CENTERED,displayMode.w, displayMode.h, SDL_WINDOW_OPENGL);
      {$ENDIF}
    if Screen=nil then begin
        debug_message_to_android('Could not create window.');
        exit(false);
        end else begin
        debug_message_to_android('Window created');

        end;

    actualScreen:=Screen^;

    screenSurface := SDL_GetWindowSurface( Screen );
    if(screenSurface=nil) then begin
        debug_message_to_android('Could not get screen surface');
        exit(false);
        end;

    debug_message_to_android('drawing surface w='+IntToStr((screenSurface^).w)+' h='+IntToStr((screenSurface^).h));


    go_on:=false;

    while ((SDL_WaitEvent(@sdl_wait_event) <> 0) and not go_on) do begin

       if(sdl_wait_event.type_ and SDL_WINDOWEVENT > 0) then begin
          go_on:=true;
          end;
    end;

    glesContext := SDL_GL_CreateContext(Screen);
    if(glesContext=nil) then begin
       debug_message_to_android('could not create GL context: '+SDL_GetError());
       exit(false);
       end;

    glViewport(0, 0, displayMode.w, displayMode.h);


    printGLString('Version', GL_VERSION);
    printGLString('Vendor', GL_VENDOR);
    printGLString('Renderer', GL_RENDERER);
    printGLString('Extensions', GL_EXTENSIONS);

    SDL_GL_SetSwapInterval(1);

   setupGraphicsAndroid:=true;






    end;



   function openGLESexampleProgram: boolean;
    var gVertexShader, gFragmentShader : String;
    begin


      gVertexShader:='attribute vec4 vPosition; '+
        'void main() { '+
        '  gl_Position = vPosition; '+
        '} ';


      gFragmentShader :=
        'precision mediump float; '+
        'void main() { '+
        '  gl_FragColor = vec4(0.0, 1.0, 0.0, 1.0); '+
        '} ';

      gProgram := createProgram(gVertexShader, gFragmentShader);
      if gProgram = 0 then begin
      {$IF Defined(ANDROID)}
          debug_message_to_android('Could not create program.');
      {$IFEND}
       exit(False);
       end;
      gvPositionHandle := glGetAttribLocation(gProgram, 'vPosition');
      checkGlError('glGetAttribLocation');


      openGLESexampleProgram:=True;
    end;


procedure openGLESexampleProgramRenderFrame();
begin
  grey := grey+0.01;
  if grey > 1 then grey:=0;

  glClearColor(grey, grey, grey, 1.0);
  checkGlError('glClearColor');
  glClear(GL_DEPTH_BUFFER_BIT + GL_COLOR_BUFFER_BIT);
  checkGlError('glClear');
  glUseProgram(gProgram);
  checkGlError('glUseProgram');

  glVertexAttribPointer(gvPositionHandle, 2, GL_FLOAT, Bytebool(GL_FALSE), 0,
                        @gTriangleVertices[0]);
  checkGlError('glVertexAttribPointer');
  glEnableVertexAttribArray(gvPositionHandle);
  checkGlError('glEnableVertexAttribArray');
  glDrawArrays(GL_TRIANGLES, 0, 3);
  checkGlError('glDrawArrays');
end;


procedure glColor4f(red: GLfloat; green: GLfloat; blue: GLfloat; alpha: GLfloat);
begin

end;

procedure glbegin(mode: GLenum);
begin

end;


procedure glEnd();
begin

end;


procedure glVertex2f(x,y: GLfloat);
begin

end;

procedure glColor3f(red,green,blue: GLfloat);
begin

end;

procedure glTexEnvf(target: GLenum; pname: GLenum; param: GLfloat);
begin

end;

procedure glTexCoord2f(s: GLfloat; t: GLfloat);
begin

end;

procedure glTexEnvi(target: GLenum; pname: GLenum; param: GLint);
begin

end;

procedure glVertex3f (x: GLfloat; y: GLfloat; z: GLfloat);
begin

end;

procedure glVertex3d (x: GLdouble; y: GLdouble; z: GLdouble);
begin
   glVertex3f(x,y,z);
end;

procedure glVertex4f(x: GLfloat; y: GLfloat; z: GLfloat; w: GLfloat);
begin

end;

procedure glVertex4d(x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble);
begin
   glVertex4f(x,y,z,w);
end;

procedure glGenBuffersARB(n: GLsizei; buffers: PGLuint);
begin

end;

procedure glBindBufferARB(target: GLenum; buffer: GLuint);
begin

end;

procedure glDeleteBuffersARB (n: GLsizei; const buffers: PGLuint);
begin

end;

procedure glBufferDataARB(target: GLenum; size: GLsizeiptrARB; const data: PGLvoid; usage: GLenum);
begin

end;

function glMapBufferARB (target: GLenum; access: GLenum): PGLvoid;
begin
  glMapBufferARB:=nil;
end;

function glUnmapBufferARB (target: GLenum): GLboolean;
begin
  glUnmapBufferARB:=True;
end;

procedure glDepthRange (n,f: GLfloat);
begin
  glDepthRangef(n,f);
end;


procedure glMatrixMode (mode: GLenum);
begin

end;

procedure glPushMatrix();
begin

end;

procedure glTranslatef(x: GLfloat; y: GLfloat; z: GLfloat);
begin

end;

procedure glTranslated(x: GLDouble; y: GLDouble; z: GLDouble);
begin
   glTranslatef(x,y,z);
end;

procedure glScalef(x: GLfloat; y: GLfloat; z: GLfloat);
begin

end;

procedure glVertex2s(x: GLshort; y: GLshort);
begin

end;

procedure glVertex2d(x: GLdouble; y: GLdouble);
begin

end;

procedure glPopMatrix();
begin

end;


procedure glClipPlane(plane: GLenum; const equation: PGLdouble);
begin

end;

procedure glClearAccum(red: GLfloat; green: GLfloat; blue: GLfloat; alpha: GLfloat);
begin

end;

procedure glColor3d(red: GLdouble; green: GLdouble; blue: GLdouble);
begin

end;

procedure glColor4d(red: GLdouble; green: GLdouble; blue: GLdouble; alpha: GLdouble);
begin
   glColor4d(red,green,blue,alpha);
end;

procedure glDisableClientState(_array: GLenum);
begin

end;

procedure glDrawBuffer(mode: GLenum);
begin

end;

procedure glEnableClientState(_array: GLenum);
begin

end;

procedure glEndList();
begin

end;

procedure glInitNames();
begin

end;

procedure glLoadIdentity();
begin

end;

procedure glLogicOp(opcode: GLenum);
begin

end;

procedure glOrthof (left: GLfloat; right: GLfloat; bottom: GLfloat; top: GLfloat; zNear: GLfloat; zFar: GLfloat);
begin

end;

procedure glPopAttrib();
begin

end;
procedure glPopClientAttrib();
begin

end;

procedure glPopName();
begin

end;

procedure glRasterPos2d(x: GLdouble; y: GLdouble);
begin

end;

procedure glRasterPos3d(x: GLdouble; y: GLdouble; z: GLdouble);
begin

end;

procedure glRasterPos4d(x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble);
begin

end;

procedure glRectd(x1: GLdouble; y1: GLdouble; x2: GLdouble; y2: GLdouble);
begin

end;

procedure glRotated(angle: GLdouble; x: GLdouble; y: GLdouble; z: GLdouble);
begin

end;

procedure glScaled(x: GLdouble; y: GLdouble; z: GLdouble);
begin
   glScalef(x,y,z);
end;
procedure glShadeModel(mode: GLenum);
begin

end;

procedure glTexCoord1d(s: GLdouble);
begin
   glTexCoord1f(s);
end;

procedure glTexCoord1f(s: GLfloat);
begin

end;

procedure glTexCoord2d(s: GLdouble; t: GLdouble);
begin
   glTexCoord2f(s,t);
end;

procedure glTexCoord3f(s: GLfloat; t: GLfloat; r: GLfloat);
begin

end;

procedure glTexCoord3d(s: GLdouble; t: GLdouble; r: GLdouble);
begin
    glTexCoord3d(s,t,r);
end;

procedure glTexCoord4d(s: GLdouble; t: GLdouble; r: GLdouble; q: GLdouble);
begin
   glTexCoord4f(s,t,r,q);
end;

procedure glTexCoord4f(s: GLfloat; t: GLfloat; r: GLfloat; q: GLfloat);
begin

end;

procedure draw_rectangle_quads_opengles(left: GLFloat; top: GLFloat; right: GLFloat; bottom: GLFloat;
  tx1: GLfloat; ty1: GLfloat; tx2: GLFloat; ty2: GLFloat; tex_num: GLenum);
var
  vertex_coords: array[0..7] of GLfloat;
  texcoords: array[0..7] of GLfloat;
begin

  {vertex_coords[0]:=left;  vertex_coords[1]:=top;
  vertex_coords[2]:=left;  vertex_coords[3]:=bottom;
  vertex_coords[4]:=right;  vertex_coords[5]:=bottom;
  vertex_coords[6]:=right;  vertex_coords[7]:=top;

  texcoords[0]:=tx1; texcoords[1]:=ty1;
  texcoords[2]:=tx1; texcoords[3]:=ty2;
  texcoords[4]:=tx2; texcoords[5]:=ty2;
  texcoords[6]:=tx2; texcoords[7]:=ty1;
  glEnableClientState(GL_VERTEX_ARRAY);
  glEnableClientState(GL_TEXTURE_COORD_ARRAY);
  glVertexPointer(2, GL_FLOAT, 0, @vertex_coords[0]);
  glClientActiveTexture(GL_TEXTURE0 + tex_num);
  glTexCoordPointer(2, GL_FLOAT, 0, @texcoords[0]);
  //glDisableVertexAttribArray(0);

  glDrawArrays(GL_TRIANGLE_FAN,0,4);
  glDisableClientState(GL_VERTEX_ARRAY);
  glDisableClientState(GL_TEXTURE_COORD_ARRAY);   }

  end;


procedure draw_rectangle_quads_opengles_color(left: GLFloat; top: GLFloat; right: GLFloat; bottom: GLFloat;
  r1,g1,b1,alpha1,r2,g2,b2,alpha2,r3,g3,b3,alpha3,r4,g4,b4,alpha4: GLFloat;
  tx1: GLfloat; ty1: GLfloat; tx2: GLFloat; ty2: GLFloat; tex_num: GLenum);
begin
  draw_quads_opengles_color(left,top,right,top,
  right,bottom,left,bottom,tx1,ty1,tx2,ty1,tx2,ty2,tx1,ty2,
  r1,g1,b1,alpha1,r2,g2,b2,alpha2,r3,g3,b3,alpha3,r4,g4,b4,alpha4,
  tex_num);
end;

procedure draw_quads_opengles_z(x1,y1,x2,y2,x3,y3,x4,y4, z: GLFloat;
  tx1,ty1,tx2,ty2,tx3,ty3,tx4,ty4: GLFloat; tex_num:  GLenum);
var
  vertex_coords: array[0..11] of GLfloat;
  texcoords: array[0..7] of GLfloat;
begin

  {vertex_coords[0]:=x1;  vertex_coords[1]:=y1; vertex_coords[2]:=z;
  vertex_coords[3]:=x2;  vertex_coords[4]:=y2; vertex_coords[5]:=z;
  vertex_coords[6]:=x3;  vertex_coords[7]:=y3; vertex_coords[8]:=z;
  vertex_coords[9]:=x4;  vertex_coords[10]:=y4; vertex_coords[11]:=z;

  texcoords[0]:=tx1; texcoords[1]:=ty1;
  texcoords[2]:=tx2; texcoords[3]:=ty2;
  texcoords[4]:=tx3; texcoords[5]:=ty3;
  texcoords[6]:=tx4; texcoords[7]:=ty4;
  glEnableClientState(GL_VERTEX_ARRAY);
  glEnableClientState(GL_TEXTURE_COORD_ARRAY);
  glVertexPointer(3, GL_FLOAT, 0, @vertex_coords[0]);
  glClientActiveTexture(GL_TEXTURE0 + tex_num);
  glTexCoordPointer(2, GL_FLOAT, 0, @texcoords[0]);
  //glDisableVertexAttribArray(0);

  glDrawArrays(GL_TRIANGLE_FAN,0,4);
  glDisableClientState(GL_VERTEX_ARRAY);
  glDisableClientState(GL_TEXTURE_COORD_ARRAY); }

  end;


procedure draw_quads_opengles_z_color(x1,y1,z1,x2,y2,z2,
  x3,y3,z3,x4,y4, z4: GLFloat;
  tx1,ty1,tx2,ty2,tx3,ty3,tx4,ty4: GLFloat;
  r1,g1,b1,alpha1,r2,g2,b2,alpha2,r3,g3,b3,alpha3,r4,g4,b4,alpha4: GLFloat;
  tex_num:  GLenum);
var
  vertex_coords: array[0..11] of GLfloat;
  color_coords: array[0..15] of GLfloat;
  texcoords: array[0..7] of GLfloat;
begin

  {vertex_coords[0]:=x1;  vertex_coords[1]:=y1; vertex_coords[2]:=z1;
  vertex_coords[3]:=x2;  vertex_coords[4]:=y2; vertex_coords[5]:=z2;
  vertex_coords[6]:=x3;  vertex_coords[7]:=y3; vertex_coords[8]:=z3;
  vertex_coords[9]:=x4;  vertex_coords[10]:=y4; vertex_coords[11]:=z4;

  texcoords[0]:=tx1; texcoords[1]:=ty1;
  texcoords[2]:=tx2; texcoords[3]:=ty2;
  texcoords[4]:=tx3; texcoords[5]:=ty3;
  texcoords[6]:=tx4; texcoords[7]:=ty4;

  color_coords[0]:=r1;  color_coords[1]:=g1; color_coords[2]:=b1; color_coords[3]:=alpha1;
  color_coords[4]:=r2;  color_coords[5]:=g2; color_coords[6]:=b2; color_coords[7]:=alpha2;
  color_coords[8]:=r3;  color_coords[9]:=g3; color_coords[10]:=b3; color_coords[11]:=alpha3;
  color_coords[12]:=r4;  color_coords[13]:=g4; color_coords[14]:=b4; color_coords[15]:=alpha4;

  glEnableClientState(GL_VERTEX_ARRAY);
  glEnableClientState(GL_TEXTURE_COORD_ARRAY);
  glEnableClientState(GL_COLOR_ARRAY);
  glVertexPointer(3, GL_FLOAT, 0, @vertex_coords[0]);
  glClientActiveTexture(GL_TEXTURE0 + tex_num);
  glTexCoordPointer(2, GL_FLOAT, 0, @texcoords[0]);
  glColorPointer(4, GL_FLOAT, 0, @color_coords[0]);
  //glDisableVertexAttribArray(0);

  glDrawArrays(GL_TRIANGLE_FAN,0,4);
  glDisableClientState(GL_COLOR_ARRAY);
  glDisableClientState(GL_VERTEX_ARRAY);
  glDisableClientState(GL_TEXTURE_COORD_ARRAY);  }

  end;

procedure draw_quads_opengles_color(x1,y1,x2,y2,
  x3,y3,x4,y4: GLFloat;
  tx1,ty1,tx2,ty2,tx3,ty3,tx4,ty4: GLFloat;
  r1,g1,b1,alpha1,r2,g2,b2,alpha2,r3,g3,b3,alpha3,r4,g4,b4,alpha4: GLFloat;
  tex_num:  GLenum);
var
  vertex_coords: array[0..7] of GLfloat;
  color_coords: array[0..15] of GLfloat;
  texcoords: array[0..7] of GLfloat;
begin
{
  vertex_coords[0]:=x1;  vertex_coords[1]:=y1;
  vertex_coords[2]:=x2;  vertex_coords[3]:=y2;
  vertex_coords[4]:=x3;  vertex_coords[5]:=y3;
  vertex_coords[6]:=x4;  vertex_coords[7]:=y4;

  texcoords[0]:=tx1; texcoords[1]:=ty1;
  texcoords[2]:=tx2; texcoords[3]:=ty2;
  texcoords[4]:=tx3; texcoords[5]:=ty3;
  texcoords[6]:=tx4; texcoords[7]:=ty4;

  color_coords[0]:=r1;  color_coords[1]:=g1; color_coords[2]:=b1; color_coords[3]:=alpha1;
  color_coords[4]:=r2;  color_coords[5]:=g2; color_coords[6]:=b2; color_coords[7]:=alpha2;
  color_coords[8]:=r3;  color_coords[9]:=g3; color_coords[10]:=b3; color_coords[11]:=alpha3;
  color_coords[12]:=r4;  color_coords[13]:=g4; color_coords[14]:=b4; color_coords[15]:=alpha4;

  glEnableClientState(GL_VERTEX_ARRAY);
  glEnableClientState(GL_TEXTURE_COORD_ARRAY);
  glEnableClientState(GL_COLOR_ARRAY);
  glVertexPointer(2, GL_FLOAT, 0, @vertex_coords[0]);
  glClientActiveTexture(GL_TEXTURE0 + tex_num);
  glTexCoordPointer(2, GL_FLOAT, 0, @texcoords[0]);
  glColorPointer(4, GL_FLOAT, 0, @color_coords[0]);
  //glDisableVertexAttribArray(0);

  glDrawArrays(GL_TRIANGLE_FAN,0,4);
  glDisableClientState(GL_COLOR_ARRAY);
  glDisableClientState(GL_VERTEX_ARRAY);
  glDisableClientState(GL_TEXTURE_COORD_ARRAY); }

  end;



end.

